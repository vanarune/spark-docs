
def IPConvert ( s: String) : Long = 
 {
	       val array =  s.split("\\.")
                  array(0).toLong *256*256*256+ array(1).toLong*256*256 +  array(2).toLong*256 + array(3).toLong
 }

import org.apache.spark.sql.expressions.UserDefinedFunction
import org.apache.spark.sql.functions.udf

val IPConvertUDF: UserDefinedFunction = udf((value:String) => {
  IPConvert(value)
})

val IPDFWithParsedIP = IPDF.withColumn("parsedIP",IPConvertUDF($"ip"))


def timeIt[T](op: => T): Float = {
	val start = System.currentTimeMillis
	val res = op
	val end = System.currentTimeMillis
	(end - start) / 1000f
}


def temperatureConverter (temp: Double, unit:String) : temperature = { 
  if(unit=="F") temperature(temp, (temp - 32) * 5/9, (temp - 32) * 5/9 + 273.15)
  else if (unit=="C") temperature((temp * 9/5) + 32,	temp,	temp + 273.15)
  else temperature((temp - 273.15) * 9/5 + 32,	temp - 273.15,	temp)
} // FILL_IN

val temperatureConverterUDF: UserDefinedFunction = udf((temp:Double,unit:String) => {
  temperatureConverter(temp,unit)
})

val weatherEnhancedDF = weatherDF.select($"*",temperatureConverterUDF($"TAVG",$"UNIT").alias("TAVGAdjusted"))
